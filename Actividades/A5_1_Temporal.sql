-- OK
CREATE TABLE USERS (
    ID INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    NAME VARCHAR(150) NOT NULL,
    ADDRESS VARCHAR(150) NOT NULL,
    SYS_START TIMESTAMP(12) GENERATED ALWAYS AS ROW BEGIN NOT NULL,
    SYS_END TIMESTAMP(12) GENERATED ALWAYS AS ROW END NOT NULL,
    TRANS_START TIMESTAMP(12) GENERATED ALWAYS AS TRANSACTION START ID IMPLICITLY HIDDEN,
    PERIOD SYSTEM_TIME(SYS_START, SYS_END),
    PRIMARY KEY (ID)
);

-- OK
CREATE TABLE USERS_HYSTORY LIKE USERS;
-- OK
ALTER TABLE USERS ADD VERSIONING USE HISTORY TABLE USERS_HYSTORY;

-- OK
CREATE TABLE CARS(
    PLATE VARCHAR(10) NOT NULL,
    YEAR INT NOT NULL,
    MODEL VARCHAR(30) NOT NULL,
    BRAND VARCHAR(30) NOT NULL,
    PRICE DECIMAL NOT NULL,
    MOTOR_NUM INT NOT NULL,
    SERIES_NUM INT NOT NULL,
    PRIMARY KEY (PLATE)
);

-- OK
CREATE TABLE INSURANCE (
  USER_ID INT NOT NULL,
  CAR_PLATE VARCHAR(10) NOT NULL,
  PRICE DECIMAL(10,2) NOT NULL,
  COVERAGE INT NOT NULL,
  cstart DATE NOT NULL,
  cend DATE NOT NULL,
  period business_time(cstart, cend),
  SYS_START TIMESTAMP(12) GENERATED ALWAYS AS ROW BEGIN NOT NULL,
  SYS_END TIMESTAMP(12) GENERATED ALWAYS AS ROW END NOT NULL,
  TRANS_START TIMESTAMP(12) GENERATED ALWAYS AS TRANSACTION START ID IMPLICITLY HIDDEN,
  PERIOD SYSTEM_TIME(SYS_START, SYS_END),
  PRIMARY KEY (CAR_PLATE, USER_ID, business_time WITHOUT overlaps),
  CONSTRAINT CAR_FK FOREIGN KEY (CAR_PLATE)
    REFERENCES CARS ON DELETE CASCADE,
  CONSTRAINT USER_FK FOREIGN KEY (USER_ID)
    REFERENCES USERS ON DELETE CASCADE
);

-- OK
CREATE TABLE INSURANCE_HYSTORY LIKE INSURANCE;
-- OK
ALTER TABLE INSURANCE ADD VERSIONING USE HISTORY TABLE INSURANCE_HYSTORY;


-- NOT OK FROM HERE ON

--Triggers
--En cancelaciÃ³n, disminuir precio
DROP TRIGGER PRICE_ADJUST;
CREATE TRIGGER PRICE_ADJUST
  AFTER UPDATE ON INSURANCE REFERENCING
  NEW AS new_val
  OLD AS old_val
  FOR EACH ROW MODE DB2SQL
  WHEN (new_val.CSTART != old_val.CSTART OR new_val.CEND != old_val.CEND)
  BEGIN ATOMIC
    DECLARE new_price DECIMAL(10,2);
    SET new_price = CAST(old_val.PRICE * (DAYS(new_val.CEND) - DAYS(new_val.CSTART))/(DAYS(old_val.CEND) - DAYS(old_val.CSTART)) AS DECIMAL(10,2));
    UPDATE INSURANCE SET PRICE = new_price WHERE USER_ID=new_val.USER_ID AND CAR_PLATE=new_val.CAR_PLATE;
  END;

--En update no se puede disminuir las coverturas de poliza
CREATE TRIGGER INSURANCE_UPGRADE
  BEFORE UPDATE ON INSURANCE REFERENCING
  NEW AS new_val
  OLD AS old_val
  FOR EACH ROW MODE DB2SQL
  WHEN (old_val.COVERAGE > new_val.COVERAGE)
  BEGIN ATOMIC
      SIGNAL SQLSTATE '75001' ('Invalid update: only coverage upgrades are allowed!');
  END;